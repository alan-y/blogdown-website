<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Alan Yeung</title>
    <link>https://alan-y.netlify.com/post/</link>
    <description>Recent content in Posts on Alan Yeung</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2019 Alan Yeung</copyright>
    <lastBuildDate>Sun, 05 Nov 2023 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://alan-y.netlify.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Grouped Sequences in dplyr</title>
      <link>https://alan-y.netlify.com/post/2023-11-05-grouped-sequences-in-dplyr/</link>
      <pubDate>Sun, 05 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://alan-y.netlify.com/post/2023-11-05-grouped-sequences-in-dplyr/</guid>
      <description>For a piece of work I had to calculate the number of matches that a team plays away from home in a row, which we will call days_on_the_road. I was not sure how to do this with dplyr but it’s basically a ‘grouped sequence’. For this post, I’ve created some dummy data to illustrate this idea. The num_matches_away variable is what we want to mimic using some data manipulation.</description>
    </item>
    
    <item>
      <title>A couple of case_when() tricks</title>
      <link>https://alan-y.netlify.com/post/couple-of-casewhen-tricks/</link>
      <pubDate>Mon, 09 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://alan-y.netlify.com/post/couple-of-casewhen-tricks/</guid>
      <description>Combining case_when() and across()If you want to use case_when() and across() different variables, then here is an example that can do this with the help of the get() and cur_column() functions.
library(tidyverse)iris_df &amp;lt;- as_tibble(iris) %&amp;gt;% mutate(flag_Petal.Length = as.integer(Petal.Length &amp;gt; 1.5),flag_Petal.Width = as.integer(Petal.Width &amp;gt; 0.2))iris_df %&amp;gt;% mutate(across(c(Petal.Length, Petal.Width),~case_when(get(glue::glue(&amp;quot;flag_{cur_column()}&amp;quot;)) == 1 ~ NA_real_,TRUE ~ .x))) %&amp;gt;% select(contains(&amp;quot;Petal&amp;quot;))## # A tibble: 150 × 4## Petal.</description>
    </item>
    
    <item>
      <title>Summarising Dates with Missing Values</title>
      <link>https://alan-y.netlify.com/post/summarising-dates-with-missing-values/</link>
      <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://alan-y.netlify.com/post/summarising-dates-with-missing-values/</guid>
      <description>This blog post is just a note that when you try to do a grouped summary of a date variable but some groups have all missing values, it will return Inf. This means that the summary will not show up as an NA and this can cause issues in analysis if you are not careful.
library(tidyverse)df &amp;lt;- tibble::tribble(~id, ~dt,1L, &amp;quot;01/01/2001&amp;quot;,1L, NA,2L, NA,2L, NA) %&amp;gt;% mutate(dt = dmy(dt))z1 &amp;lt;- df %&amp;gt;% group_by(id) %&amp;gt;% summarise(dt_min = min(dt, na.</description>
    </item>
    
    <item>
      <title>Rafa 21 Grand Slams and gganimate</title>
      <link>https://alan-y.netlify.com/post/rafa-21-slams/</link>
      <pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://alan-y.netlify.com/post/rafa-21-slams/</guid>
      <description>I’ve been a Nadal fan for a long time – right back to the days of the pirate-pants so yeah, really a long time. In all this time, Rafa has never been ahead in the grand slam race vs his biggest rivals… but that finally changed after the 2022 Australian Open! The win there was unexpected and came out of nowhere. The final against Medvedev has to go down as one of the best comebacks ever.</description>
    </item>
    
    <item>
      <title>Filtering with string statements in dplyr</title>
      <link>https://alan-y.netlify.com/post/filtering-string-dplyr/</link>
      <pubDate>Wed, 13 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alan-y.netlify.com/post/filtering-string-dplyr/</guid>
      <description>A question came up recently at work about how to use a filter statement entered as a complete string variable inside dplyr’s filter() function – for example dplyr::filter(my_data, &#34;var1 == &#39;a&#39;&#34;). There does not seem to be much out there on this and I was not sure how to do it either but luckily jakeybob had a neat solution that seems to work well.
some_data %&amp;gt;% filter(eval(rlang::parse_expr(selection_statement)))Let’s see it in action using the iris flowers dataset.</description>
    </item>
    
    <item>
      <title>Updating packages on a drat repo</title>
      <link>https://alan-y.netlify.com/post/updating-packages-on-a-drat-repo/</link>
      <pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alan-y.netlify.com/post/updating-packages-on-a-drat-repo/</guid>
      <description>This is just a small note (mainly for myself but hopefully may be of some use to a few others!) to remind of how to update a package on a drat repo.
Create the source file for the package you want to host on the drat repo using devtools::build().Clone the drat repo hosting the package (in my case https://github.com/alan-y/drat).Use drat::insertPackage(&#34;package-source.tar.gz&#34;, getwd()) to add the package to the drat repo (getwd() works for me if my working directory is at the top level of the drat repo).</description>
    </item>
    
    <item>
      <title>Scotland&#39;s Most Popular Babynames</title>
      <link>https://alan-y.netlify.com/post/scot-babynames/</link>
      <pubDate>Sat, 25 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alan-y.netlify.com/post/scot-babynames/</guid>
      <description>Downloading the dataShiny AppI recently saw this great post on Nathan Yau’s FlowingData website which guesses a person’s name based on what the name starts with. It also needs you to select a gender and a decade for when you were born before it can guess. Of course, it isn’t really a guess and is really just based on proportions calculated after restricting the data to what has been selected.</description>
    </item>
    
    <item>
      <title>Trying the ckanr Package</title>
      <link>https://alan-y.netlify.com/post/trying-ckanr/</link>
      <pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://alan-y.netlify.com/post/trying-ckanr/</guid>
      <description>How resources are grouped in CKANInitialising ckanr and exploring groups of resourcesConnect to CKAN with dplyr and download from one resourceDownloading all resources from a datasetIn previous blog posts (Hacking dbplyr for CKAN, Getting Open Data into R from CKAN) I have been exploring how to download data from the NHS Scotland open data platform into R. I’ve recently discovered that ROpenSci has a package to help with just this called ckanr and I wish I’d known about it earlier as it is really pretty handy!</description>
    </item>
    
    <item>
      <title>objectremover RStudio Addin</title>
      <link>https://alan-y.netlify.com/post/objectremover-rstudio-addin/</link>
      <pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://alan-y.netlify.com/post/objectremover-rstudio-addin/</guid>
      <description>A Learning ExerciseWorkflowI created my first ever R package and got it released onto CRAN in March 2019. It’s taken me a while to get round to actually writing about this which tells me that despite many years of trying to overcome procrastination, I’m obviously still not there! The package is actually an RStudio addin called objectremover that helps you to quickly remove objects stored in memory (specifically objects saved in the Global environment) within an R session.</description>
    </item>
    
    <item>
      <title>Hacking dbplyr for CKAN</title>
      <link>https://alan-y.netlify.com/post/ckan-dbplyr/</link>
      <pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://alan-y.netlify.com/post/ckan-dbplyr/</guid>
      <description>AimCreate a dummy databaseTest dbplyr’s SQL translationModify dbplyr’s SQL translationTesting the dbplyr hackConcluding notesAt the end of my first post on CKAN discussing how to use the CKAN API to extract data from the NHS open data platform directly into R, I talked about how it would be neat to write some wrapper functions to make this process a little simpler.</description>
    </item>
    
    <item>
      <title>Getting Open Data into R from CKAN</title>
      <link>https://alan-y.netlify.com/post/ckan-api/</link>
      <pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://alan-y.netlify.com/post/ckan-api/</guid>
      <description>PreambleOpen Data in ScotlandQuerying CKANQuerying with Custom JSONQuerying with SQLConclusions and Further IdeasPreambleI’ve got lots of rough pieces of R code written as I’ve been exploring/testing various things in the past. A lot of this is currently stored in a pretty disorganised fashion so I thought it would be a good idea to start writing some of these up into blog posts – at the very least, this should make it easier for me to find things later!</description>
    </item>
    
    <item>
      <title>Glasgow R User Group</title>
      <link>https://alan-y.netlify.com/post/glasgow-r-user-group/</link>
      <pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://alan-y.netlify.com/post/glasgow-r-user-group/</guid>
      <description>I am very excited to hear that there are attempts to create a brand new R user group in Glasgow! I had just talked in Post Number One about my guilt at not having been able to attend EdinbR as often as I wished but it should be much easier for me to find time to attend a group based in Glasgow. If you are based in (or near) Glasgow and would like to join the R community, this sounds like the place to be – I hope this idea takes off!</description>
    </item>
    
    <item>
      <title>Post Number One</title>
      <link>https://alan-y.netlify.com/post/post-number-one/</link>
      <pubDate>Sun, 19 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://alan-y.netlify.com/post/post-number-one/</guid>
      <description>I suppose this is my hello world post – I’ve never been good at getting my messages out there (I’m minimally active on social media, etc) but this is part of my attempt to rectify that a little. I have wanted to start a blog for a long time and in fact, I previously started one but failed to keep it going (hopefully this time it’ll be different!). I had called that one ‘Quietly Analysing’ which was mostly inspired from a quote by Ian Hacking in 1936.</description>
    </item>
    
  </channel>
</rss>